SQL Keywords

**_Copy everything below this into MySQL Workbench_**

-- SELECT

/_ Select all columns from the products table. _/

SELECT \*  
FROM products;

/_ Select only the Name and Price columns from the products table. _/

SELECT Name, Price
FROM products;

/_ Select Name, Price, and add a 3rd column AS “Discounted Price” with a 10% discount. _/

SELECT Name, Price, (Price - (Price \* .1)) AS “Discounted Price”
FROM products;

---

-- SELECT DISTINCT

/_ Select only the distinct prices from the products table _/

SELECT DISTINCT Price FROM products;

---

-- WHERE

/_ Select all the products whose price is greater than \$100 _/

SELECT \*
FROM products
WHERE Price > 100.00;

/_ Select the product with a product ID of 97 _/

SELECT \*
FROM products
WHERE ProductID = 97;

---

-- AND, OR, NOT, IS, NULL

/_ Select all the employees who are geek squad members and who doesn’t have a middle initial _/

SELECT \*
FROM employees
WHERE Title = “Geek Squad” AND MiddleInitial IS NULL;

/_ Select all the employees who are geek squad members and have a middle initial _/

SELECT \*
FROM employees
WHERE Title = “Geek Squad” AND MiddleInitial IS NOT NULL;

/_ Select all the products who are on sale or whose stock levels are 0 _/
SELECT \*
FROM products
WHERE OnSale IS True OR StockLevel IS NULL;

---

-- ORDER BY

/_ Select all the products whose price is greater than \$200 and is on sale, order by price descending _/

SELECT \*
FROM products
WHERE Price > 200 AND OnSale IS True
ORDER BY Price DESC;

/_ Select all the products whose price is less than \$200 and category ID is either 1 or 3 order by CategoryID Ascending and Name Ascending _/

SELECT \*
FROM products
WHERE Price < 200 AND CategoryID = 1 OR CategoryID = 3
ORDER BY CategoryID ASC, Name ASC;

---

-- INSERT INTO

/_ Add a new department named IoT to the departments table (you might need to change the ID if you’ve already added some to your table) _/
INSERT INTO departments
VALUES (5, “IoT”);

/_ Add a new employee and input their first name, last name, middle initial, and Email Address _/
INSERT INTO employees (FirstName, LastName, MiddleInitial, EmailAddress)
VALUES(“John”, “Smith”,“D”, “123@abc.com”);

---

-- UPDATE
/_ Update the first and last name of the employee John D. Smith => Jack J. Jackson (Don’t forget your WHERE clause) _/

-- The employee ID number may be slightly different for you depending on if you’ve already inserted some rows into the table

UPDATE employees
SET FirstName = "Jack", MiddleInitial = “J”, LastName = "Jackson"
WHERE EmployeeID = 34618;

---

-- DELETE

/_ Delete all the entries you’ve INSERTED INTO in your table (DON’T FORGET WHERE CLAUSE!)_/

DELETE
FROM employees
WHERE EmployeeID = 34618;

---

-- MIN() and MAX()

SELECT MIN(Price)
FROM Products;

SELECT MAX(StockLevel)
From Products;

---

-- COUNT(), AVG(), SUM()

/_ Return the total count of products _/

SELECT COUNT(ProductID)
FROM products;

/_ Return the average of all the products _/

SELECT AVG(Price)
FROM Products;

/_ Return the total amount of money you’re entire products table is worth _/

SELECT SUM(StockLevel \* Price)
FROM products;

---

-- LIKE and wildcards

/_ The SQL LIKE Operator
Usually used with wildcards
% = The percentage sign means 0 or more characters
\_ = The underscore sign means a single character
_/

/_ Return all products with “J” as the first letter _/

SELECT \*
FROM products
WHERE Name LIKE ‘J%’;

/_ Return all products with “y” as the last letter _/

SELECT \*
FROM products
WHERE Name LIKE ‘%y’;

For more information on WILDCARDS go to: https://www.w3schools.com/sql/sql_wildcards.asp

---

-- BETWEEN

/_ Return all the products from $10 - $100 _/

SELECT \*
FROM products
WHERE Price BETWEEN 10 AND 20;

---

-- ORDER BY

/_ Order the previous query by Price ascending _/

SELECT \*
FROM products
WHERE Price BETWEEN 10 AND 20
ORDER BY Price;

/_ Order the previous query by Price descending _/

SELECT \*
FROM products
WHERE Price BETWEEN 10 AND 20
ORDER BY Price DESC;
